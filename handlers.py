import re
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, ContextTypes, filters
from deepseek import ask_deepseek
from reminder import schedule_reminders
from calendar_api import book_slot
import datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ "–ù–µ–ø–æ—Å–µ–¥—ã". –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?'
    )
    context.user_data['history'] = []
    context.user_data['visit_time'] = None
    context.user_data['awaiting_name'] = False
    context.user_data['awaiting_phone'] = False
    context.user_data['client_name'] = None
    context.user_data['client_phone'] = None

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    history = context.user_data.get('history', [])
    history = history[-8:]
    user_text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—å–±—É –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    if re.search(r'–Ω–∞–ø–æ–º–Ω(–∏|–∏—Ç—å|–∞–Ω–∏–µ)', user_text):
        visit_time = context.user_data.get('visit_time')
        if visit_time:
            schedule_reminders(
                application=context.application,
                chat_id=update.effective_chat.id,
                visit_time=visit_time
            )
            await update.message.reply_text("–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ –≤–∏–∑–∏—Ç–µ ‚Äî –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.")
        return

    # --- –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞ ---
    match = re.search(r'(\d{1,2})\s*(–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*–≤\s*(\d{1,2}):(\d{2})', user_text)
    months = {
        '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    }
    if match:
        day = int(match.group(1))
        month = months.get(match.group(2))
        hour = int(match.group(3))
        minute = int(match.group(4))
        year = datetime.datetime.now().year
        visit_time = datetime.datetime(year, month, day, hour, minute)
        context.user_data['visit_time'] = visit_time
        context.user_data['awaiting_name'] = True
        context.user_data['client_name'] = None
        context.user_data['client_phone'] = None
        await update.message.reply_text(
            f"–ó–∞–ø–∏—Å–∞–ª –≤–∞—à –≤–∏–∑–∏—Ç –Ω–∞ {visit_time.strftime('%d.%m.%Y %H:%M')}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
        )
        return

    # --- –ï—Å–ª–∏ –∂–¥—ë–º –∏–º—è ---
    if context.user_data.get('awaiting_name'):
        context.user_data['client_name'] = update.message.text.strip()
        context.user_data['awaiting_name'] = False
        context.user_data['awaiting_phone'] = True
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")
        return

    # --- –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω ---
    if context.user_data.get('awaiting_phone'):
        phone = re.sub(r"[^\d+]", "", update.message.text)
        if len(phone) < 10:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return
        context.user_data['client_phone'] = phone
        context.user_data['awaiting_phone'] = False
        visit_time = context.user_data.get('visit_time')
        name = context.user_data.get('client_name')
        
        # –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
        try:
            event_id = book_slot(visit_time, {
                'name': name,
                'phone': phone,
                'service': context.user_data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                'child_age': context.user_data.get('child_age', '‚Äî')
            })
            if event_id:
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {visit_time.strftime('%d.%m.%Y %H:%M')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∏–∑–∏—Ç–µ."
                )
            else:
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {visit_time.strftime('%d.%m.%Y %H:%M')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∏–∑–∏—Ç–µ."
                )
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {visit_time.strftime('%d.%m.%Y %H:%M')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∏–∑–∏—Ç–µ."
            )
        return

    # --- –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ ---
    # –ü–æ–∫–∞–∑–∞—Ç—å "–ü–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    history.append({"role": "user", "content": update.message.text})
    response = ask_deepseek(update.message.text, history=history)
    history.append({"role": "assistant", "content": response})
    context.user_data['history'] = history
    await update.message.reply_text(response)

def setup_handlers(app):
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))