import re
import os
import datetime
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, ContextTypes, filters
from deepseek import ask_deepseek
from reminder import schedule_reminders, schedule_monthly_reminder
from calendar_api import book_slot, list_events_for_date, delete_event, update_event_time, is_slot_free, merge_client_into_event
from dotenv import load_dotenv
from zoneinfo import ZoneInfo
from typing import Optional
import logging
import json
from state_store import get_user_state, update_user_state
from db import upsert_client, add_booking
from textwrap import wrap
import dateparser
from datetime import time as dtime
import json
from reminder import scheduler
from calendar_api import get_free_slots

async def send_chunked(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, chunk_size: int = 3500) -> None:
    if text is None:
        return
    if len(text) <= chunk_size:
        await context.bot.send_message(chat_id=chat_id, text=text)
        return
    paragraphs = text.split("\n\n")
    for para in paragraphs:
        if len(para) <= chunk_size:
            await context.bot.send_message(chat_id=chat_id, text=para)
        else:
            for piece in wrap(para, width=chunk_size, replace_whitespace=False, break_long_words=False):
                await context.bot.send_message(chat_id=chat_id, text=piece)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
TZ = ZoneInfo('Europe/Moscow')

# --- –¶–µ–Ω—ã (–ø–æ–¥–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ---
PRICES_FILE = 'prices.json'

def _load_prices() -> dict:
    try:
        with open(PRICES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return {}

def _find_price_entry(query_text: str) -> tuple[str | None, str | None]:
    prices = _load_prices()
    if not prices:
        return None, None
    t = query_text.lower()
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    service_filters = []
    if '–º—É–∂—Å–∫' in t or '–≤–∑—Ä–æ—Å–ª' in t:
        service_filters.append('–º—É–∂')
    if '–¥–µ—Ç—Å–∫' in t or '—Ä–µ–±—ë–Ω' in t or '—Ä–µ–±–µ–Ω' in t:
        service_filters.append('–¥–µ—Ç')
    if '–∂–µ–Ω—Å–∫' in t:
        service_filters.append('–∂–µ–Ω')
    if '—Å—Ç—Ä–∏–∂' in t:
        service_filters.append('—Å—Ç—Ä–∏–∂')
    if '—É–∫–ª–∞–¥' in t:
        service_filters.append('—É–∫–ª–∞–¥')
    if '–ø–ª–µ—Ç–µ–Ω' in t:
        service_filters.append('–ø–ª–µ—Ç')
    if '–æ–∫—Ä–∞—à' in t or '–∫–æ–ª–æ—Ä' in t:
        service_filters.append('–æ–∫—Ä–∞—à')

    # –ò—â–µ–º –ø–æ –∫–ª—é—á–∞–º —Ü–µ–Ω–Ω–∏–∫–∞
    best_key = None
    for name in prices.keys():
        name_l = name.lower()
        if all(sf in name_l for sf in service_filters) if service_filters else True:
            # –ø—Ä–µ–¥–ø–æ—á—Ç–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if best_key is None or len(name_l) > len(best_key.lower()):
                best_key = name
    if not best_key:
        # fallback: –ª—é–±–∞—è "—Å—Ç—Ä–∏–∂–∫–∞"
        for name in prices.keys():
            if '—Å—Ç—Ä–∏–∂' in name.lower():
                best_key = name
                break
    if not best_key:
        return None, None
    return best_key, prices.get(best_key)

# ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CHAT_ID_ENV = os.getenv('ADMIN_CHAT_ID')
if not ADMIN_CHAT_ID_ENV:
    raise ValueError('ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_ENV)
except ValueError:
    raise ValueError('ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)')

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–§ ---
def normalize_ru_phone(raw_phone: str) -> Optional[str]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."""
    if not raw_phone:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', raw_phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if len(digits) == 11:
        # 11 —Ü–∏—Ñ—Ä: 7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
        if digits[0] in ('7', '8'):
            return '+7' + digits[1:]
    elif len(digits) == 10:
        # 10 —Ü–∏—Ñ—Ä: 9XXXXXXXXX –∏–ª–∏ 8XXXXXXXXX (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
        if digits[0] in ('9', '8'):
            return '+7' + digits
    elif len(digits) == 12:
        # 12 —Ü–∏—Ñ—Ä: 89XXXXXXXXXX (—Å –ª–∏—à–Ω–µ–π 8)
        if digits[0:2] == '89':
            return '+7' + digits[2:]
    
    return None

def suggest_time_slots(for_date: datetime.date, preference: Optional[str] = None) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2‚Äì3 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è,
    –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ (–µ—Å–ª–∏ –¥–∞—Ç–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è).
    """
    morning = ["10:00", "11:30"]
    day = ["14:00", "15:30"]
    evening = ["18:00", "19:00"]
    slots = []
    if preference == 'morning':
        slots = morning + [day[0]]
    elif preference == 'day':
        slots = day + [evening[0]]
    elif preference == 'evening':
        slots = evening + [day[0]]
    else:
        slots = [morning[0], day[0], evening[0]]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –µ—Å–ª–∏ –¥–∞—Ç–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è
    now = datetime.datetime.now(tz=TZ)
    if for_date == now.date():
        filtered = []
        for s in slots:
            hour, minute = map(int, s.split(':'))
            slot_dt = datetime.datetime.combine(for_date, datetime.time(hour, minute), tzinfo=TZ)
            if slot_dt > now:
                filtered.append(s)
        return filtered
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–∏—á–µ–≥–æ
    if for_date < now.date():
        return []
    return slots

def detect_time_preference(text: str) -> Optional[str]:
    t = text.lower()
    if '—É—Ç—Ä' in t:
        return 'morning'
    if '–¥–Ω' in t:
        return 'day'
    if '–≤–µ—á–µ—Ä' in t:
        return 'evening'
    return None

def parse_child_age(text: str) -> Optional[int]:
    m = re.search(r'(\d{1,2})\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)', text.lower())
    if m:
        try:
            return int(m.group(1))
        except Exception:
            return None
    return None

def _save_context_state(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    now_iso = datetime.datetime.now(tz=TZ).isoformat()
    state = {
        'visit_time': context.user_data.get('visit_time').isoformat() if context.user_data.get('visit_time') else None,
        'client_name': context.user_data.get('client_name'),
        'client_phone': context.user_data.get('client_phone'),
        'service': context.user_data.get('service'),
        'child_age': context.user_data.get('child_age'),
        'date': context.user_data.get('date'),
        'time': context.user_data.get('time'),
        'greeted': context.user_data.get('greeted', False),
        'last_interaction': now_iso,
        'pending_date': context.user_data.get('pending_date')
    }
    update_user_state(chat_id, state)

def _load_context_state(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = get_user_state(chat_id)
    if not state:
        return
    visit_time = state.get('visit_time')
    context.user_data['visit_time'] = datetime.datetime.fromisoformat(visit_time) if visit_time else None
    context.user_data['client_name'] = state.get('client_name')
    context.user_data['client_phone'] = state.get('client_phone')
    context.user_data['service'] = state.get('service')
    context.user_data['child_age'] = state.get('child_age')
    context.user_data['date'] = state.get('date')
    context.user_data['time'] = state.get('time')
    context.user_data['greeted'] = state.get('greeted', False)
    context.user_data['last_interaction'] = state.get('last_interaction')
    context.user_data['pending_date'] = state.get('pending_date')

def _reset_context(context: ContextTypes.DEFAULT_TYPE) -> None:
    for key in ['visit_time', 'client_name', 'client_phone', 'service', 'child_age', 'date', 'time', 'pending_date', 'history']:
        context.user_data.pop(key, None)
    context.user_data['greeted'] = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['greeted'] = True
    greeting = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )
    await update.message.reply_text(greeting)
    _save_context_state(update.effective_chat.id, context)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ–±–µ –ø–æ—Å–ª–µ 2 –º–∏–Ω—É—Ç –º–æ–ª—á–∞–Ω–∏—è ---
def schedule_inactivity_reminder(context, chat_id):
    job_id = f'inactivity_reminder_{chat_id}'
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    def send_reminder():
        try:
            context.bot.send_message(
                chat_id,
                "–Ø –Ω–∞ —Å–≤—è–∑–∏, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –ø–æ —É—Å–ª—É–≥–∞–º –∏ –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üòä"
            )
        except Exception:
            pass
    scheduler.add_job(send_reminder, 'date', run_date=datetime.datetime.now(TZ) + datetime.timedelta(minutes=2), id=job_id)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    _load_context_state(chat_id, context)
    history = context.user_data.get('history', [])[-8:]
    user_text_raw = update.message.text
    user_text = user_text_raw.lower()

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å ---
    if '—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' in user_text or '—Å–±—Ä–æ—Å–∏—Ç—å' in user_text:
        context.user_data.clear()
        await update.message.reply_text("–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!")
        return

    if '–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä' in user_text or '–Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω' in user_text or '–º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω' in user_text:
        phone_match = re.search(r'(\+?\d[\d\s\-\(\)]{8,})', user_text_raw)
        if phone_match:
            new_phone = normalize_ru_phone(phone_match.group(1))
            if new_phone:
                context.user_data['client_phone'] = new_phone
                _save_context_state(chat_id, context)
                await update.message.reply_text(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_phone}")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 9–•–• –•–•–•-–•–•-–•–•.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if '–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å' in user_text or '–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É' in user_text or '–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è' in user_text:
        parsed_dt = dateparser.parse(user_text_raw, languages=['ru'], settings={'PREFER_DATES_FROM': 'future', 'RELATIVE_BASE': datetime.datetime.now()})
        if parsed_dt:
            if parsed_dt.tzinfo is None:
                parsed_dt = parsed_dt.replace(tzinfo=TZ)
            context.user_data['visit_time'] = parsed_dt
            context.user_data['date'] = parsed_dt.date().isoformat()
            context.user_data['time'] = parsed_dt.strftime('%H:%M')
            _save_context_state(chat_id, context)
            await update.message.reply_text(f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {parsed_dt.strftime('%d.%m.%Y %H:%M')}")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ 15 —Å–µ–Ω—Ç—è–±—Ä—è –∫ 14:00').")
        return

    # --- –§–∏–ª—å—Ç—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è: –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å ---
    intent_words = [
        "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å", "—Ö–æ—á—É —Å—Ç—Ä–∏–∂–∫—É", "—Ö–æ—á—É —É–∫–ª–∞–¥–∫—É", "—Å—Ç—Ä–∏–∂–∫—É", "—É–∫–ª–∞–¥–∫—É", "–ø–æ—Å—Ç—Ä–∏—á—å—Å—è", "–ø–æ–¥—Å—Ç—Ä–∏—á—å—Å—è", "–æ—Å–≤–µ–∂–∏—Ç—å",
        "—Å—Ç—Ä–∏–∂–∫–∞", "—É–∫–ª–∞–¥–∫–∞", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–æ–∫—Ä–∞—Å–∏—Ç—å", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "–º–∞—Å—Ç–µ—Ä", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "—Å–∞–ª–æ–Ω", "—É—Å–ª—É–≥–∞"
    ]
    if any(word in user_text for word in intent_words):
        # --- –ü–æ—à–∞–≥–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ (—Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏) ---
        # 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        name_phone_match = re.match(r'^\s*([–ê-–Ø–∞-—èA-Za-z–Å—ë\-\s]+)[,;\s]+(\+?\d[\d\s\-\(\)]{8,})\s*$', user_text_raw)
        if name_phone_match:
            context.user_data['client_name'] = name_phone_match.group(1).strip()
            phone_norm = normalize_ru_phone(name_phone_match.group(2).strip())
            if phone_norm:
                context.user_data['client_phone'] = phone_norm
            _save_context_state(chat_id, context)

        # 2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        phone_match = re.search(r'(\+?\d[\d\s\-\(\)]{8,})', user_text_raw)
        if phone_match and not context.user_data.get('client_phone'):
            phone_norm = normalize_ru_phone(phone_match.group(1))
            if phone_norm:
                context.user_data['client_phone'] = phone_norm
                _save_context_state(chat_id, context)

        # 3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –∏–º—è (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        if not context.user_data.get('client_name') and len(user_text_raw.split()) == 1 and user_text_raw.isalpha():
            context.user_data['client_name'] = user_text_raw.strip().capitalize()
            _save_context_state(chat_id, context)

        # 4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É/–≤—Ä–µ–º—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä)
        if not context.user_data.get('visit_time'):
            parsed_dt = dateparser.parse(user_text_raw, languages=['ru'], settings={'PREFER_DATES_FROM': 'future', 'RELATIVE_BASE': datetime.datetime.now()})
            if parsed_dt:
                if parsed_dt.tzinfo is None:
                    parsed_dt = parsed_dt.replace(tzinfo=TZ)
                context.user_data['visit_time'] = parsed_dt
                context.user_data['date'] = parsed_dt.date().isoformat()
                context.user_data['time'] = parsed_dt.strftime('%H:%M')
                _save_context_state(chat_id, context)

        # 5. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å —É—Å–ª—É–≥—É
        if not context.user_data.get('service'):
            if '—Å—Ç—Ä–∏–∂–∫' in user_text:
                context.user_data['service'] = '–°—Ç—Ä–∏–∂–∫–∞'
            elif '—É–∫–ª–∞–¥–∫' in user_text:
                context.user_data['service'] = '–£–∫–ª–∞–¥–∫–∞'
            elif '–æ–∫—Ä–∞—à' in user_text or '–∫–æ–ª–æ—Ä' in user_text:
                context.user_data['service'] = '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ'
            _save_context_state(chat_id, context)

        # 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –≤—Å–µ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏
        required_fields = ['client_name', 'client_phone', 'visit_time', 'service']
        missing = [f for f in required_fields if not context.user_data.get(f)]
        known = []
        if context.user_data.get('client_name'):
            known.append(f"–ò–º—è: {context.user_data['client_name']}")
        if context.user_data.get('client_phone'):
            known.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['client_phone']}")
        if context.user_data.get('visit_time'):
            known.append(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context.user_data['visit_time'].strftime('%d.%m.%Y %H:%M')}")
        if context.user_data.get('service'):
            known.append(f"–£—Å–ª—É–≥–∞: {context.user_data['service']}")

        if not missing:
            # –í—Å—ë –µ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
            name = context.user_data['client_name']
            phone = context.user_data['client_phone']
            visit_time = context.user_data['visit_time']
            service = context.user_data['service']
            try:
                event_id = book_slot(visit_time, {
                    'name': name,
                    'phone': phone,
                    'service': service,
                    'child_age': context.user_data.get('child_age', '‚Äî')
                })
                client_id = upsert_client(name, phone)
                add_booking(client_id, visit_time.isoformat(), service, event_id)
                schedule_reminders(application=context.application, chat_id=chat_id, visit_time=visit_time)
                schedule_monthly_reminder(application=context.application, chat_id=chat_id, visit_time=visit_time)
                admin_message = (
                    f"üìÖ –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!\n\nüë§ {name}\nüì± {phone}\nüïê {visit_time:%d.%m.%Y %H:%M}\nüíá‚Äç‚ôÄÔ∏è {service}"
                )
                await send_chunked(context, ADMIN_CHAT_ID, admin_message)
                await send_chunked(
                    context,
                    chat_id,
                    f"–ì–æ—Ç–æ–≤–æ!\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–£—Å–ª—É–≥–∞: {service}\n–ö–æ–≥–¥–∞: {visit_time:%d.%m.%Y %H:%M}\n"
                    "–Ø –Ω–∞–ø–æ–º–Ω—é –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –≤–∏–∑–∏—Ç–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ ¬´–ù–µ–ø–æ—Å–µ–¥–∞—Ö¬ª!"
                )
                _reset_context(context)
                _save_context_state(chat_id, context)
            except Exception as e:
                print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ (–∂–∏–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç): {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
            return
        else:
            # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–≥–æ-—Ç–æ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ
            if 'client_name' in missing and 'client_phone' in missing:
                await update.message.reply_text(
                    f"{'; '.join(known)}\n\n–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                )
                return
            if 'client_name' in missing:
                await update.message.reply_text(
                    f"{'; '.join(known)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
                )
                return
            if 'client_phone' in missing:
                await update.message.reply_text(
                    f"{'; '.join(known)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                )
                return
            if 'visit_time' in missing:
                await update.message.reply_text(
                    f"{'; '.join(known)}\n\n–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –ù–∞–∑–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."
                )
                return
            if 'service' in missing:
                await update.message.reply_text(
                    f"{'; '.join(known)}\n\n–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ? (—Å—Ç—Ä–∏–∂–∫–∞, —É–∫–ª–∞–¥–∫–∞, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)"
                )
                return
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏—á–µ–≥–æ ‚Äî fallback
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ: –¥–∞—Ç—É, –≤—Ä–µ–º—è, –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —É—Å–ª—É–≥—É."
        )
        return
    else:
        # --- –°–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ DeepSeek (–ò–ò) ---
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        first_name = context.user_data.get('tg_first_name') or ''
        username = context.user_data.get('tg_username') or ''
        user_meta = f"(id:{user_id} {first_name} @{username})".strip()
        history = context.user_data.get('history', [])[-8:]
        history.append({"role": "user", "content": f"{user_meta}: {user_text_raw}"})
        context.user_data['history'] = history
        _save_context_state(chat_id, context)
        try:
            response = ask_deepseek(user_text_raw, history=history)
            print(f"[–û–¢–õ–ê–î–ö–ê] –û—Ç–≤–µ—Ç –ò–ò: {response}")
            if response and response != "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.":
                history.append({"role": "assistant", "content": response})
                context.user_data['history'] = history
                await send_chunked(context, chat_id, response)
                return
            else:
                fallback_response = (
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. "
                    "–ü–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, —É–∫–ª–∞–¥–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏. "
                    "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏?"
                )
                await update.message.reply_text(fallback_response)
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}")
            fallback_response = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. "
                "–ü–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, —É–∫–ª–∞–¥–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏. "
                "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏?"
            )
            await update.message.reply_text(fallback_response)
        return

    # --- Fallback: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ---
    greetings = [
        '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '—Ö–∞–π', 'hello', 'hi'
    ]
    if user_text.strip() in greetings and not context.user_data.get('greeted', False):
        context.user_data['greeted'] = True
        _save_context_state(chat_id, context)
        greeting = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        )
        await update.message.reply_text(greeting)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã Telegram –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    tg_user = update.effective_user
    context.user_data['tg_user_id'] = tg_user.id
    context.user_data['tg_username'] = getattr(tg_user, 'username', None)
    context.user_data['tg_first_name'] = getattr(tg_user, 'first_name', None)
    _save_context_state(chat_id, context)

    # TTL 30 –º–∏–Ω—É—Ç: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å
    last_iso = context.user_data.get('last_interaction')
    if last_iso:
        try:
            last_dt = datetime.datetime.fromisoformat(last_iso)
            if (datetime.datetime.now(tz=TZ) - last_dt).total_seconds() > 30 * 60:
                _reset_context(context)
        except Exception:
            pass
    _save_context_state(chat_id, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
    if user_id == ADMIN_CHAT_ID:
        if user_text.startswith('/admin_today'):
            today = datetime.datetime.now(tz=TZ).date()
            events = list_events_for_date(today)
            await update.message.reply_text('\n'.join(
                f"{datetime.datetime.fromisoformat(e['start'].get('dateTime')).strftime('%H:%M')} ‚Äî {e.get('summary', '–ó–∞–ø–∏—Å—å')}" for e in events
            ) or '–°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.')
            return
        if user_text.startswith('/admin_date'):
            parts = user_text.split()
            if len(parts) != 2:
                await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_date YYYY-MM-DD')
                return
            date = datetime.date.fromisoformat(parts[1])
            events = list_events_for_date(date)
            await update.message.reply_text('\n'.join(
                f"{datetime.datetime.fromisoformat(e['start'].get('dateTime')).strftime('%H:%M')} ‚Äî {e.get('summary', '–ó–∞–ø–∏—Å—å')}" for e in events
            ) or '–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.')
            return
        if user_text.startswith('/admin_cancel'):
            parts = user_text.split()
            if len(parts) == 2 and delete_event(parts[1]):
                await update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.')
            else:
                await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å.')
            return
        if user_text.startswith('/admin_move'):
            parts = user_text.split()
            if len(parts) != 4:
                await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_move <event_id> YYYY-MM-DD HH:MM')
                return
            date = datetime.date.fromisoformat(parts[2])
            hour, minute = map(int, parts[3].split(':'))
            ok = update_event_time(parts[1], datetime.datetime.combine(date, datetime.time(hour, minute)))
            await update.message.reply_text('–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.' if ok else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.')
            return
    # --- –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

    print(f"[–û–¢–õ–ê–î–ö–ê] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç: '{user_text_raw}'")

    # 0) –†–∞–Ω–Ω–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø—É—Ç–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    early_np = re.match(r'^\s*([–ê-–Ø–∞-—èA-Za-z–Å—ë\-\s]+)[,;\s]+(\+?\d[\d\s\-\(\)]{8,})\s*$', user_text_raw)
    if early_np:
        name_early = early_np.group(1).strip()
        phone_early_raw = early_np.group(2).strip()
        phone_early_norm = normalize_ru_phone(phone_early_raw)
        if phone_early_norm:
            context.user_data['client_name'] = name_early
            context.user_data['client_phone'] = phone_early_norm
            _save_context_state(chat_id, context)
            vt_ctx = context.user_data.get('visit_time')
            if vt_ctx:
                service = context.user_data.get('service') or '–°—Ç—Ä–∏–∂–∫–∞'
                try:
                    event_id = book_slot(vt_ctx, {
                        'name': name_early,
                        'phone': phone_early_norm,
                        'service': service,
                        'child_age': context.user_data.get('child_age', '‚Äî')
                    })
                    client_id = upsert_client(name_early, phone_early_norm)
                    add_booking(client_id, vt_ctx.isoformat(), service, event_id)
                    schedule_reminders(application=context.application, chat_id=chat_id, visit_time=vt_ctx)
                    schedule_monthly_reminder(application=context.application, chat_id=chat_id, visit_time=vt_ctx)
                    admin_message = (
                        f"üìÖ –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!\n\nüë§ {name_early}\nüì± {phone_early_norm}\nüïê {vt_ctx:%d.%m.%Y %H:%M}\nüíá‚Äç‚ôÄÔ∏è {service}"
                    )
                    await send_chunked(context, ADMIN_CHAT_ID, admin_message)
                    await send_chunked(
                        context,
                        chat_id,
                        (
                            f"–ì–æ—Ç–æ–≤–æ!\n–ò–º—è: {name_early}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_early_norm}\n–£—Å–ª—É–≥–∞: {service}\n–ö–æ–≥–¥–∞: {vt_ctx:%d.%m.%Y %H:%M}\n\n"
                            "–Ø –Ω–∞–ø–æ–º–Ω—é –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –≤–∏–∑–∏—Ç–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ ¬´–ù–µ–ø–æ—Å–µ–¥–∞—Ö¬ª!"
                        )
                    )
                except Exception as e:
                    print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ (—Ä–∞–Ω–Ω–∏–π –±–ª–æ–∫): {e}")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
                return
            else:
                await update.message.reply_text(
                    "–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 9–•–• –•–•–•-–•–•-–•–•."
                )
                return

    visit_time: Optional[datetime.datetime] = None

    # 1) –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–±–ª–∏–∂–∞–π—à–∞—è/—Å–ª–µ–¥—É—é—â–∞—è —Å—Ä–µ–¥–∞ –∏ —Ç.–ø.)
    day_variant_to_weekday = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—Å—Ä–µ–¥—É': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3,
        '–ø—è—Ç–Ω–∏—Ü–∞': 4, '–ø—è—Ç–Ω–∏—Ü—É': 4, '—Å—É–±–±–æ—Ç–∞': 5, '—Å—É–±–±–æ—Ç—É': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
    }

    rel_day_regex = re.compile(
        r'\b(?:–≤|–Ω–∞)?\s*(–±–ª–∏–∂–∞–π—à\w*|—Å–ª–µ–¥—É—é—â\w*)?\s*(?:–≤\s+)?'
        r'(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç–∞|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b'
    )

    # –ù–æ–≤—ã–π –±–ª–æ–∫: –∏—â–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"
    is_next_week = bool(re.search(r'–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ|—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è', user_text))

    m = rel_day_regex.search(user_text)
    processed_text = user_text
    if m:
        prefix = m.group(1) or ''  # –±–ª–∏–∂–∞–π—à–∏–π / —Å–ª–µ–¥—É—é—â–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ)
        day_word = m.group(2)
        target_wd = day_variant_to_weekday.get(day_word)
        now = datetime.datetime.now(tz=TZ)
        today = now.date()
        current_wd = now.weekday()
        days_until = (target_wd - current_wd) % 7

        # –õ–æ–≥–∏–∫–∞ —Å–º–µ—â–µ–Ω–∏—è
        if prefix.startswith('—Å–ª–µ–¥—É—é—â') or is_next_week:
            days_until = (days_until or 7) + 7  # –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        else:
            if days_until == 0:
                days_until = 7  # –±–ª–∏–∂–∞–π—à–∏–π/–ø—Ä–æ—Å—Ç–æ–π: –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –∞ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è

        target_date = today + datetime.timedelta(days=days_until)
        print(f"[–û–¢–õ–ê–î–ö–ê] –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å: '{prefix or '–ø—Ä–æ—Å—Ç–æ'} {day_word}' => {target_date}")

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ –æ–ø–µ—á–∞—Ç–∫–∞–º "—á–∞–æ–≤")
        t = re.search(r'(\d{1,2})\s*(?:—á–∞—Å(?:–∞|–æ–≤)?|—á–∞–æ–≤)?\s*(?:[:\.\-]?\s*(\d{2}))?', user_text)
        if t:
            hour = int(t.group(1))
            minute = int((t.group(2) or '0'))
            visit_time = datetime.datetime.combine(target_date, datetime.time(hour, minute), tzinfo=TZ)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ä–∞–∑—É, –¥–æ –æ–±–µ—â–∞–Ω–∏–π
            if not is_slot_free(visit_time):
                await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É, —è —É—Ç–æ—á–Ω—é —É –º–∞—Å—Ç–µ—Ä–∞.")
                await send_chunked(
                    context,
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {visit_time:%d.%m.%Y %H:%M}. –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è."
                )
                same_date = visit_time.date()
                context.user_data['pending_date'] = same_date.isoformat()
                _save_context_state(chat_id, context)
                alt = [s for s in suggest_time_slots(same_date) if s != f"{hour:02d}:{minute:02d}"]
                if not alt:
                    alt = suggest_time_slots(same_date)
                await update.message.reply_text(
                    f"–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ {same_date.strftime('%d.%m.%Y')}: {', '.join(alt)}. –ü–æ–¥–æ–π–¥—ë—Ç —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?"
                )
                return
            context.user_data['visit_time'] = visit_time
            context.user_data['date'] = target_date.isoformat()
            context.user_data['time'] = f"{hour:02d}:{minute:02d}"
            _save_context_state(chat_id, context)
            print(f"[–û–¢–õ–ê–î–ö–ê] –î–µ–Ω—å+–≤—Ä–µ–º—è => {visit_time}")
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ—Å–∏–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
            if visit_time and context.user_data.get('date'):
                await update.message.reply_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! {visit_time.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}.\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, +7 999 123-45-67"
                )
                return
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ—Å–∏–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –±–µ–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! {target_date.strftime('%d.%m.%Y')} –≤ {hour:02d}:{minute:02d}. "
                "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, +7 999 123-45-67"
            )
            return
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
            context.user_data['pending_date'] = target_date.isoformat()
            context.user_data['date'] = target_date.isoformat()
            _save_context_state(chat_id, context)
            pref = detect_time_preference(user_text)
            slots = suggest_time_slots(target_date, pref)
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! {target_date.strftime('%d.%m.%Y')} –ø–æ–¥–æ–π–¥—ë—Ç. –í–æ —Å–∫–æ–ª—å–∫–æ –≤–∞–º —É–¥–æ–±–Ω–æ? –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: {', '.join(slots)}."
            )
            return
    else:
        print("[–û–¢–õ–ê–î–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
        # –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º target_date, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ
        # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –±–ª–æ–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ UnboundLocalError
        pass

    # 2) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if visit_time is None:
        parsed_dt = dateparser.parse(
            processed_text,
            languages=['ru'],
            settings={
                'PREFER_DATES_FROM': 'future',
                'RELATIVE_BASE': datetime.datetime.now()
            }
        )
        print(f"[–û–¢–õ–ê–î–ö–ê] dateparser —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {parsed_dt}")
        if parsed_dt:
            if parsed_dt.tzinfo is None:
                parsed_dt = parsed_dt.replace(tzinfo=TZ)
            if parsed_dt.time() == dtime(0, 0):
                context.user_data['pending_date'] = parsed_dt.date().isoformat()
                context.user_data['date'] = parsed_dt.date().isoformat()
                _save_context_state(chat_id, context)
                pref = detect_time_preference(user_text)
                slots = suggest_time_slots(parsed_dt.date(), pref)
                await update.message.reply_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! {parsed_dt.strftime('%d.%m.%Y')} –ø–æ–¥–æ–π–¥—ë—Ç. –í–æ —Å–∫–æ–ª—å–∫–æ –≤–∞–º —É–¥–æ–±–Ω–æ? –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: {', '.join(slots)}."
                )
                return
            else:
                visit_time = parsed_dt
                if visit_time <= datetime.datetime.now(tz=TZ):
                    await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                    return
                context.user_data['visit_time'] = visit_time
                context.user_data['date'] = visit_time.date().isoformat()
                context.user_data['time'] = visit_time.strftime('%H:%M')
                _save_context_state(chat_id, context)
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–∏—Ç—å
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤ —Å—É–±–±–æ—Ç—É —É—Ç—Ä–æ–º', '–Ω–∞ 15 –∞–≤–≥—É—Å—Ç–∞ –∫ 14:00')."
            )
        # –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ universal dateparser

    # 3) –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ (pending_date) –∏ —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è
    if visit_time is None:
        pending_date_iso = context.user_data.get('pending_date')
        if pending_date_iso:
            t = re.search(r'(\d{1,2})\s*(?:—á–∞—Å(?:–∞|–æ–≤)?|—á–∞–æ–≤)?\s*(?:[:\.\-]?\s*(\d{2}))?', user_text)
            if t:
                hour = int(t.group(1))
                minute = int((t.group(2) or '0'))
                pd = datetime.date.fromisoformat(pending_date_iso)
                visit_time = datetime.datetime.combine(pd, datetime.time(hour, minute), tzinfo=TZ)
                if visit_time <= datetime.datetime.now(tz=TZ):
                    await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                    return
                context.user_data['visit_time'] = visit_time
                context.user_data.pop('pending_date', None)
                context.user_data['date'] = pd.isoformat()
                context.user_data['time'] = f"{hour:02d}:{minute:02d}"
                _save_context_state(chat_id, context)
                print(f"[–û–¢–õ–ê–î–ö–ê] –°–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–ª–∏ pending_date + –≤—Ä–µ–º—è => {visit_time}")

    # 4) –ï—Å–ª–∏ –µ—Å—Ç—å visit_time (–ª–∏–±–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –∏–∑ –ø–∞–º—è—Ç–∏) ‚Äî –ø—Ä–æ—Å–∏–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    if visit_time is None:
        visit_time = context.user_data.get('visit_time')
        if visit_time:
            if visit_time <= datetime.datetime.now(tz=TZ):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
                return
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É—Å–ª—É–≥—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if '—Å—Ç—Ä–∏–∂–∫' in user_text:
                context.user_data['service'] = '–°—Ç—Ä–∏–∂–∫–∞'
            elif '—É–∫–ª–∞–¥–∫' in user_text:
                context.user_data['service'] = '–£–∫–ª–∞–¥–∫–∞'
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –∏–º—è+—Ç–µ–ª–µ—Ñ–æ–Ω —Å—Ä–∞–∑—É
            name_phone_match = re.match(r'^\s*([–ê-–Ø–∞-—èA-Za-z–Å—ë\-\s]+)[,;\s]+(\+?\d[\d\s\-\(\)]{8,})\s*$', user_text_raw)
            if name_phone_match:
                name = name_phone_match.group(1).strip()
                phone_raw = name_phone_match.group(2).strip()
                phone_norm = normalize_ru_phone(phone_raw)
                if not phone_norm:
                    await update.message.reply_text(
                        "–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 9–•–• –•–•–•-–•–•-–•–•."
                    )
                    return
                service = context.user_data.get('service') or '–°—Ç—Ä–∏–∂–∫–∞'
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–ª–æ—Ç–∞
                    if not is_slot_free(visit_time):
                        await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É, —è —É—Ç–æ—á–Ω—é —É –º–∞—Å—Ç–µ—Ä–∞.")
                        await send_chunked(
                            context,
                            ADMIN_CHAT_ID,
                            f"‚ö†Ô∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {visit_time:%d.%m.%Y %H:%M}. –ö–ª–∏–µ–Ω—Ç {name}, {phone_norm}, —É—Å–ª—É–≥–∞ {service}"
                        )
                        # –°–æ–ª—å—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∫–ª–∏–µ–Ω—Ç—É
                        merge_client_into_event(visit_time, {
                            'name': name,
                            'phone': phone_norm,
                            'service': service,
                            'child_age': context.user_data.get('child_age', '‚Äî')
                        })
                        same_date = visit_time.date()
                        context.user_data['pending_date'] = same_date.isoformat()
                        _save_context_state(chat_id, context)
                        alt_slots = [s for s in suggest_time_slots(same_date) if s != visit_time.strftime('%H:%M')]
                        if not alt_slots:
                            alt_slots = suggest_time_slots(same_date)
                        await send_chunked(context, chat_id, f"–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ {same_date.strftime('%d.%m.%Y')}: {', '.join(alt_slots)}. –ü–æ–¥–æ–π–¥—ë—Ç —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?")
                        return
                    event_id = book_slot(visit_time, {'name': name, 'phone': phone_norm, 'service': service,
                                                      'child_age': context.user_data.get('child_age', '‚Äî')})
                    client_id = upsert_client(name, phone_norm)
                    add_booking(client_id, visit_time.isoformat(), service, event_id)
                    schedule_reminders(application=context.application, chat_id=chat_id, visit_time=visit_time)
                    schedule_monthly_reminder(application=context.application, chat_id=chat_id, visit_time=visit_time)
                    admin_message = (
                        f"üìÖ –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!\n\nüë§ {name}\nüì± {phone_norm}\nüïê {visit_time:%d.%m.%Y %H:%M}\nüíá‚Äç‚ôÄÔ∏è {service}"
                    )
                    await send_chunked(context, ADMIN_CHAT_ID, admin_message)
                    await send_chunked(context, chat_id,
                        f"–ì–æ—Ç–æ–≤–æ!\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_norm}\n–£—Å–ª—É–≥–∞: {service}\n–ö–æ–≥–¥–∞: {visit_time:%d.%m.%Y %H:%M}\n"
                        "–ê–¥—Ä–µ—Å: –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, –ê–Ω—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 26, –∫–æ—Ä–ø. 4\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ ¬´–ù–µ–ø–æ—Å–µ–¥–∞—Ö¬ª!")
                    _reset_context(context)
                    _save_context_state(chat_id, context)
                except Exception as e:
                    print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
                return
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, +7 999 123-45-67")
            return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–æ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    intent_words = [
        "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å", "—Ö–æ—á—É —Å—Ç—Ä–∏–∂–∫—É", "—Ö–æ—á—É —É–∫–ª–∞–¥–∫—É", "—Å—Ç—Ä–∏–∂–∫—É", "—É–∫–ª–∞–¥–∫—É", "–ø–æ—Å—Ç—Ä–∏—á—å—Å—è", "–ø–æ–¥—Å—Ç—Ä–∏—á—å—Å—è", "–æ—Å–≤–µ–∂–∏—Ç—å"
    ]
    if visit_time is None and any(word in user_text for word in intent_words):
        await update.message.reply_text(
            "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤ —Å—É–±–±–æ—Ç—É —É—Ç—Ä–æ–º', '–Ω–∞ 15 –∞–≤–≥—É—Å—Ç–∞ –∫ 14:00')."
        )
        return

    # 5) –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ LLM
    # --- –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–† –¢–ï–ú–ê–¢–ò–ö–ò ---
    topic_keywords = [
        '–≤–æ–ª–æ—Å', '—Å—Ç—Ä–∏–∂', '—Å–∞–ª–æ–Ω', '—É–∫–ª–∞–¥', '—Ü–µ–Ω–∞', '–∑–∞–ø–∏—Å', '–º–∞—Å—Ç–µ—Ä', '–ø–∞—Ä–∏–∫–º–∞—Ö', '—É—Ö–æ–¥',
        '–¥–µ—Ç—Å–∫', '–≤–∑—Ä–æ—Å–ª', '–ø–ª–µ—Ç–µ–Ω', '–æ–∫—Ä–∞—à', '–∫—Ä–∞—Å–æ—Ç', '–ø—Ä–∏—á–µ—Å', '–ø—Ä–∏—á—ë—Å–∫', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü', '—Å–æ–≤–µ—Ç'
    ]
    if not any(kw in user_text for kw in topic_keywords):
        await update.message.reply_text(
            '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã, —Å—Ç—Ä–∏–∂–µ–∫ –∏ —É—Ö–æ–¥–∞ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞?'
        )
        return
    # --- –ö–û–ù–ï–¶ –§–ò–õ–¨–¢–†–ê ---
    if user_id == ADMIN_CHAT_ID:
        if user_text.startswith('/admin_today'):
            today = datetime.datetime.now(tz=TZ).date()
            events = list_events_for_date(today)
            await update.message.reply_text('\n'.join(
                f"{datetime.datetime.fromisoformat(e['start'].get('dateTime')).strftime('%H:%M')} ‚Äî {e.get('summary', '–ó–∞–ø–∏—Å—å')}" for e in events
            ) or '–°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.')
            return
        if user_text.startswith('/admin_date'):
            parts = user_text.split()
            if len(parts) != 2:
                await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_date YYYY-MM-DD')
                return
            date = datetime.date.fromisoformat(parts[1])
            events = list_events_for_date(date)
            await update.message.reply_text('\n'.join(
                f"{datetime.datetime.fromisoformat(e['start'].get('dateTime')).strftime('%H:%M')} ‚Äî {e.get('summary', '–ó–∞–ø–∏—Å—å')}" for e in events
            ) or '–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.')
            return
        if user_text.startswith('/admin_cancel'):
            parts = user_text.split()
            if len(parts) == 2 and delete_event(parts[1]):
                await update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.')
            else:
                await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å.')
            return
        if user_text.startswith('/admin_move'):
            parts = user_text.split()
            if len(parts) != 4:
                await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_move <event_id> YYYY-MM-DD HH:MM')
                return
            date = datetime.date.fromisoformat(parts[2])
            hour, minute = map(int, parts[3].split(':'))
            ok = update_event_time(parts[1], datetime.datetime.combine(date, datetime.time(hour, minute)))
            await update.message.reply_text('–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.' if ok else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.')
            return

    # --- LLM (DeepSeek) ‚Äî –ø–µ—Ä–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    first_name = context.user_data.get('tg_first_name') or ''
    username = context.user_data.get('tg_username') or ''
    user_meta = f"(id:{user_id} {first_name} @{username})".strip()
    history.append({"role": "user", "content": f"{user_meta}: {user_text_raw}"})
    context.user_data['history'] = history
    _save_context_state(chat_id, context)
    try:
        response = ask_deepseek(user_text_raw, history=history)
        print(f"[–û–¢–õ–ê–î–ö–ê] –û—Ç–≤–µ—Ç –ò–ò: {response}")
        if response and response != "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.":
            history.append({"role": "assistant", "content": response})
            context.user_data['history'] = history
            await send_chunked(context, chat_id, response)
            # --- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å response –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —è–≤–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ---
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à—É –≤–∞—Å" –∏–ª–∏ "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏?" ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏
            # (–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–¥–µ–ª –¥–ª—è –±—É–¥—É—â–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏)
            return
        else:
            fallback_response = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. "
                "–ü–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, —É–∫–ª–∞–¥–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏. "
                "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏?"
            )
            await update.message.reply_text(fallback_response)
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}")
        fallback_response = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ ¬´–ù–µ–ø–æ—Å–µ–¥—ã¬ª. "
            "–ü–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, —É–∫–ª–∞–¥–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏. "
            "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–¥–æ–π—Ç–∏?"
        )
        await update.message.reply_text(fallback_response)

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return
    try:
        user_id = int(context.args[0])
        text = ' '.join(context.args[1:])
        await context.bot.send_message(chat_id=user_id, text=f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {text}')
        await update.message.reply_text('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

def setup_handlers(app):
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(CommandHandler('reply', reply_to_user))
